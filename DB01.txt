DataBase : 대량 공용 모델
1) sql문장(Query문): DB에 데이터를 요청하기 위한 문법
-SQL문장의 종류
ㄴDML(Data Manipulation Language) :데이터 조작어
	( select, insert, update, delete)
ㄴDDL(Data Definition Language) : 데이터 정의어
	( create, alter, drop, rename...)
ㄴDCL(Date Control Language) : 데이터 제어어
	( grant,revoke... )
------------------------------------------------
-- 1.select문(절) : DB에 저장된 자원들을 조회할 때 사용
SELECT employee_id, first_name, last_name
FROM EMPLOYEES;

SELECT * 
FROM employees;

SELECT employee_id, first_name, job_id
FROM employees;

--사번, 이름, 직종, 급여, 보너스, 보너스의 실제금액을 출력
SELECT employee_id, first_name, job_id,
          salary, commission_pct pct, 
          salary * commission_pct comm
FROM employees;

--2.where절 : 특정 조건에 맞는 내용을 검색하는 명령어
ex)사원테이블에서 성이 Smith인 사원의 정보를 사번, 성, 급여 순으로 출력
SELECT employee_id, last_name, salary
FROM employees
WHERE last_name = 'Smith';

문)사원테이블에서 이름이 Michael인 사원의 사번, 이름, 급여, 부서번호를 출력
SELECT employee_id, first_name, salary, department_id
FROM employees
WHERE first_name = 'Michael';

문)사원테이블에서 사원의 이름, 급여를 출력하되
급여가 10000을 초과하는 사람들만 조회
SELECT first_name, salary
FROM employees
WHERE salary>10000;

문)사번이 150초과인 사원들의 사번, 이름, 입사일을 조회
SELECT employee_id, first_name, hire_date
FROM employees
WHERE employee_id > 150;

ex)입사일이 2005년 1월 1일 이후인 사원들의 이름과 입사일을 출력
SELECT first_name, hire_date
FROM employees
WHERE hire_date >= '01/01/2005';

ex)이름의 맨 앞글자가 H보다 사전순으로 뒤에 위치한 사원들의 이름을 조회
SELECT first_name
FROM employees
WHERE first_name >= 'I' ;

ex)상사가 없는 사원의 정보를 사번, 이름, 급여 순으로 출력
SELECT employee_id, first_name, salary --다중 조건
FROM employees
WHERE manager_id is null;

--다중 조건
ex)급여가 5000이상이면서 10000이하인 사원의 사번, 이름, 급여를 출력
SELECT employee_id, first_name, salary
FROM employees
WHERE salary >= 5000 AND salary <= 10000;

문) 05년 ~06년에 입사한 사원들의 이름, 입사일을 출력

SELECT first_name, hire_date
FROM employees
WHERE hire_date >= '01/01/2005' AND hire_date <'01/01/2007';

문) 직종이 'SA_MAN'이거나 'IT_PROG'인 사원들의 이름, 직종을 조회
SELECT first_name, job_id
FROM employees
WHERE job_id = 'SA_MAN' OR job_id = 'IT_PROG';

--in연산자 : 목록이 주어졌을 때 그 목록에서 찾고자 하는 값이 있는 경우를 검색
ex)직종이 'SA_MAN'이거나 'IT_PROG'인 사원들의 이름, 직종을 조회
SELECT first_name, job_id
FROM employees
WHERE job_id IN('SA_MAN', 'IT_PROG');

문) 사번이 100, 102, 104, 106번인 사원들의 모든 정보를 출력
SELECT *
FROM employees
WHERE employee_id IN(100, 102, 104, 106);

--between연산자 : A와 B사이의 값을 검색할 때 사용
--A와 B사이의 값이 초과되거나 미만인 경우에는 사용하지 못하고
이하이거나 이상인 경우에만 사용한다
ex) 급여가 5000이상이고 6000이하인 사원들의 이름과 급여 출력
SELECT first_name, salary
FROM employees
WHERE salary >= 5000 AND salary <=6000;

SELECT first_name, salary
FROM employees
WHERE salary BETWEEN 5000 AND 6000;

문) 2005년도에 입사한 사원들의 사번, 이름, 입사일을 출력
SELECT employee_id, first_name, hire_date 
FROM employees
WHERE hire_date BETWEEN '01/01/2005' AND '12/31/2005';


--LIKE연산자(유사검색) : 지정한 값과 일치 또는 포함하고 있는 자원을 검색
1) % : 모든 값
2) _ : 하나의 값
ex) 'A%' : A로 시작되는 모든 값
ex) '%a' : a로 끝나는 모든 값
ex) '%a%' : a가 포함되어 있는 모든 값
ex) 'M______' : M으로 시작하는 값들중, 전체 길이가 7글자인 값

ex) 이름이 D로 시작하는 사원들의 사번, 이름, 급여를 출력
SELECT employee_id, first_name, salary
FROM employees
WHERE first_name LIKE 'D%';

문) 이름이 d로 끝나는 모든 사원들의 사번, 이름을 조회

SELECT employee_id, first_name
FROM employees
WHERE first_name LIKE '%d';

문) 이름의 세번째에 a가 들어가는 모든 사원들의 사번, 이름을 출력
SELECT employee_id, first_name
FROM employees
WHERE first_name LIKE '__a%';

문) 이름이 H로 시작하면서 6글자 이상인 사원들의 이름을 출력
SELECT first_name
FROM employees
WHERE first_name LIKE 'H_____%';

문)이름에 o가 포함되어 있으면서 a로 끝나는 사원들의 이름, 급여를 출력

SELECT first_name, salary
FROM employees
WHERE first_name LIKE '%o%a';



























































